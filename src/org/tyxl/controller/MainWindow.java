/*
 * MainWindow.java
 *
 * Created on Jun 26, 2012, 3:04:38 PM
 */

/*
    Copywrite 2012-2014 Will Winder

    This file is part of Universal Gcode Sender (UGS).

    UGS is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    UGS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with UGS.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.tyxl.controller;

import org.tyxl.i18n.Localization;
import org.tyxl.listeners.ControllerListener;
import org.tyxl.remote.Remote;
import org.tyxl.remote.SystemStateBean;
import org.tyxl.types.GcodeCommand;
import org.tyxl.uielements.ConnectionSettingsDialog;
import org.tyxl.uielements.GcodeFileTypeFilter;
import org.tyxl.uielements.GrblFirmwareSettingsDialog;
import org.tyxl.uielements.StepSizeSpinnerModel;
import org.tyxl.visualizer.VisualizerWindow;
import gnu.io.CommPortIdentifier;
import gnu.io.PortInUseException;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.text.DefaultCaret;
import javax.vecmath.Point3d;
import org.tyxl.uielements.MachineControlDialog;
import org.tyxl.uielements.MachineMacrosDialog;
import org.tyxl.uielements.SerialSettingsDialog;
import org.tyxl.uielements.SettingsSettingsDialog;
import org.tyxl.uielements.WizardBrowseDialog;
/**
 *
 * @author wwinder
 */
public class MainWindow extends javax.swing.JFrame 
implements KeyListener, ControllerListener, MainWindowAPI {
    private static String VERSION = Version.getVersion() + " " + Version.getTimestamp();
    private Remote remote;
    public Settings settings;
    
    /** Creates new form MainWindow */
    public MainWindow() {
        initComponents();
        initProgram();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lineBreakGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        bottomTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        commandTable = new org.tyxl.uielements.GcodeTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        consoleTextArea = new javax.swing.JTextArea();
        statusPanel = new javax.swing.JPanel();
        activeStateLabel = new javax.swing.JLabel();
        activeStateValueLabel = new javax.swing.JLabel();
        machinePosition = new javax.swing.JLabel();
        machinePositionXLabel = new javax.swing.JLabel();
        machinePositionYLabel = new javax.swing.JLabel();
        machinePositionZLabel = new javax.swing.JLabel();
        workPositionLabel = new javax.swing.JLabel();
        workPositionXLabel = new javax.swing.JLabel();
        workPositionYLabel = new javax.swing.JLabel();
        workPositionZLabel = new javax.swing.JLabel();
        machinePositionXValueLabel = new javax.swing.JLabel();
        machinePositionYValueLabel = new javax.swing.JLabel();
        machinePositionZValueLabel = new javax.swing.JLabel();
        workPositionXValueLabel = new javax.swing.JLabel();
        workPositionYValueLabel = new javax.swing.JLabel();
        workPositionZValueLabel = new javax.swing.JLabel();
        latestCommentValueLabel = new javax.swing.JLabel();
        latestCommentLabel = new javax.swing.JLabel();
        fileRunPanel = new javax.swing.JPanel();
        remainingTimeValueLabel = new javax.swing.JLabel();
        sentRowsValueLabel = new javax.swing.JLabel();
        remainingRowsLabel = new javax.swing.JLabel();
        rowsValueLabel = new javax.swing.JLabel();
        remainingTimeLabel = new javax.swing.JLabel();
        durationValueLabel = new javax.swing.JLabel();
        durationLabel = new javax.swing.JLabel();
        remainingRowsValueLabel = new javax.swing.JLabel();
        sentRowsLabel = new javax.swing.JLabel();
        rowsLabel = new javax.swing.JLabel();
        sendButton = new javax.swing.JButton();
        fileTextField = new javax.swing.JTextField();
        pauseButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        visualizeButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        fileLabel = new javax.swing.JLabel();
        commandLabel = new javax.swing.JLabel();
        commandTextField = new javax.swing.JTextField();
        mainMenuBar = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        browse = new javax.swing.JMenuItem();
        Wizard = new javax.swing.JMenuItem();
        settingsMenu = new javax.swing.JMenu();
        grblConnectionSettingsMenuItem = new javax.swing.JMenuItem();
        firmwareSettingsMenu = new javax.swing.JMenu();
        grblFirmwareSettingsMenuItem = new javax.swing.JMenuItem();
        RemoteMenu = new javax.swing.JMenu();
        startRemoteServerButton = new javax.swing.JMenuItem();
        stopRemoteServerButton = new javax.swing.JMenuItem();
        serialSetting = new javax.swing.JMenuItem();
        settingItem = new javax.swing.JMenuItem();
        machine = new javax.swing.JMenu();
        control = new javax.swing.JMenuItem();
        macros = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem3.setText("jMenuItem3");

        jMenuItem4.setText("jMenuItem4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(640, 520));

        bottomTabbedPane.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        bottomTabbedPane.setMinimumSize(new java.awt.Dimension(0, 0));
        bottomTabbedPane.setPreferredSize(new java.awt.Dimension(468, 100));

        commandTable.setModel(new org.tyxl.uielements.GcodeTableModel());
        commandTable.setMaximumSize(new java.awt.Dimension(32767, 32767));
        commandTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(commandTable);

        bottomTabbedPane.addTab("Command Table", jScrollPane1);

        consoleTextArea.setColumns(20);
        consoleTextArea.setRows(5);
        consoleTextArea.setMaximumSize(new java.awt.Dimension(32767, 32767));
        consoleTextArea.setMinimumSize(new java.awt.Dimension(0, 0));
        jScrollPane2.setViewportView(consoleTextArea);

        bottomTabbedPane.addTab("Console", jScrollPane2);

        statusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Machine status"));
        statusPanel.setMinimumSize(new java.awt.Dimension(247, 160));
        statusPanel.setPreferredSize(new java.awt.Dimension(247, 160));

        activeStateLabel.setText("Active State:");
        activeStateLabel.setOpaque(true);

        activeStateValueLabel.setText(" ");
        activeStateValueLabel.setOpaque(true);

        machinePosition.setText("Machine Position:");

        machinePositionXLabel.setText("X:");

        machinePositionYLabel.setText("Y:");

        machinePositionZLabel.setText("Z:");

        workPositionLabel.setText("Work Position:");

        workPositionXLabel.setText("X:");

        workPositionYLabel.setText("Y:");

        workPositionZLabel.setText("Z:");

        machinePositionXValueLabel.setText("0");

        machinePositionYValueLabel.setText("0");

        machinePositionZValueLabel.setText("0");

        workPositionXValueLabel.setText("0");

        workPositionYValueLabel.setText("0");

        workPositionZValueLabel.setText("0");

        latestCommentValueLabel.setText(" ");

        latestCommentLabel.setText("Latest Comment:");

        org.jdesktop.layout.GroupLayout statusPanelLayout = new org.jdesktop.layout.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(statusPanelLayout.createSequentialGroup()
                        .add(latestCommentLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(latestCommentValueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(statusPanelLayout.createSequentialGroup()
                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(statusPanelLayout.createSequentialGroup()
                                .add(activeStateLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(activeStateValueLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(statusPanelLayout.createSequentialGroup()
                                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(workPositionLabel)
                                    .add(statusPanelLayout.createSequentialGroup()
                                        .add(17, 17, 17)
                                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                            .add(statusPanelLayout.createSequentialGroup()
                                                .add(workPositionZLabel)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(workPositionZValueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .add(statusPanelLayout.createSequentialGroup()
                                                .add(workPositionYLabel)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(workPositionYValueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .add(statusPanelLayout.createSequentialGroup()
                                                .add(workPositionXLabel)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(workPositionXValueLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(machinePosition)
                                    .add(statusPanelLayout.createSequentialGroup()
                                        .add(17, 17, 17)
                                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                            .add(statusPanelLayout.createSequentialGroup()
                                                .add(machinePositionZLabel)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(machinePositionZValueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .add(statusPanelLayout.createSequentialGroup()
                                                .add(machinePositionYLabel)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(machinePositionYValueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .add(statusPanelLayout.createSequentialGroup()
                                                .add(machinePositionXLabel)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(machinePositionXValueLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))))
                        .add(0, 13, Short.MAX_VALUE)))
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelLayout.createSequentialGroup()
                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(activeStateLabel)
                    .add(activeStateValueLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(latestCommentLabel)
                    .add(latestCommentValueLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(statusPanelLayout.createSequentialGroup()
                        .add(workPositionLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(workPositionXLabel)
                            .add(workPositionXValueLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(workPositionYLabel)
                            .add(workPositionYValueLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(workPositionZLabel)
                            .add(workPositionZValueLabel)))
                    .add(statusPanelLayout.createSequentialGroup()
                        .add(machinePosition)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(machinePositionXLabel)
                            .add(machinePositionXValueLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(machinePositionYLabel)
                            .add(machinePositionYValueLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(machinePositionZLabel)
                            .add(machinePositionZValueLabel)))))
        );

        remainingTimeValueLabel.setText("--:--:--");

        sentRowsValueLabel.setText("0");

        remainingRowsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        remainingRowsLabel.setText("Remaining Rows:");
        remainingRowsLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        remainingRowsLabel.setMaximumSize(null);
        remainingRowsLabel.setMinimumSize(new java.awt.Dimension(106, 14));
        remainingRowsLabel.setPreferredSize(new java.awt.Dimension(106, 14));

        rowsValueLabel.setText("0");

        remainingTimeLabel.setText("Estimated Time Remaining:");

        durationValueLabel.setText("00:00:00");

        durationLabel.setText("Duration:");

        remainingRowsValueLabel.setText("0");

        sentRowsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        sentRowsLabel.setText("Sent Rows:");
        sentRowsLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        sentRowsLabel.setMaximumSize(null);
        sentRowsLabel.setMinimumSize(new java.awt.Dimension(106, 14));
        sentRowsLabel.setPreferredSize(new java.awt.Dimension(106, 14));

        rowsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        rowsLabel.setText("Rows In File:");
        rowsLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        rowsLabel.setMinimumSize(new java.awt.Dimension(106, 14));
        rowsLabel.setPreferredSize(new java.awt.Dimension(106, 14));

        org.jdesktop.layout.GroupLayout fileRunPanelLayout = new org.jdesktop.layout.GroupLayout(fileRunPanel);
        fileRunPanel.setLayout(fileRunPanelLayout);
        fileRunPanelLayout.setHorizontalGroup(
            fileRunPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(fileRunPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(fileRunPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, remainingRowsLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, remainingTimeLabel)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, sentRowsLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, rowsLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, durationLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(fileRunPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(durationValueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(remainingRowsValueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(sentRowsValueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(remainingTimeValueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(rowsValueLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 56, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        fileRunPanelLayout.setVerticalGroup(
            fileRunPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(fileRunPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(fileRunPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(fileRunPanelLayout.createSequentialGroup()
                        .add(rowsValueLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(sentRowsValueLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(remainingRowsValueLabel))
                    .add(fileRunPanelLayout.createSequentialGroup()
                        .add(rowsLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(sentRowsLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(remainingRowsLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(fileRunPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(remainingTimeLabel)
                    .add(remainingTimeValueLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(fileRunPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(durationValueLabel)
                    .add(durationLabel))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        sendButton.setText("Send");
        sendButton.setEnabled(false);
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        fileTextField.setEnabled(false);

        pauseButton.setText("Pause");
        pauseButton.setEnabled(false);
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        visualizeButton.setText("Visualize");
        visualizeButton.setEnabled(false);
        visualizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visualizeButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.setEnabled(false);
        saveButton.setMaximumSize(new java.awt.Dimension(88, 29));
        saveButton.setMinimumSize(new java.awt.Dimension(88, 29));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        fileLabel.setText("File");

        commandLabel.setText("Command");

        commandTextField.setEnabled(false);
        commandTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandTextFieldActionPerformed(evt);
            }
        });

        file.setText("File");

        browse.setText("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });
        file.add(browse);

        Wizard.setText("Wizard");
        Wizard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WizardActionPerformed(evt);
            }
        });
        file.add(Wizard);

        mainMenuBar.add(file);

        settingsMenu.setText("Settings");

        grblConnectionSettingsMenuItem.setText("Sender Settings");
        grblConnectionSettingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grblConnectionSettingsMenuItemActionPerformed(evt);
            }
        });
        settingsMenu.add(grblConnectionSettingsMenuItem);

        firmwareSettingsMenu.setText("Firmware Settings");

        grblFirmwareSettingsMenuItem.setText("GRBL");
        grblFirmwareSettingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grblFirmwareSettingsMenuItemActionPerformed(evt);
            }
        });
        firmwareSettingsMenu.add(grblFirmwareSettingsMenuItem);

        settingsMenu.add(firmwareSettingsMenu);

        RemoteMenu.setText("Remote");

        startRemoteServerButton.setText("Start...");
        startRemoteServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startRemoteServerButtonActionPerformed(evt);
            }
        });
        RemoteMenu.add(startRemoteServerButton);

        stopRemoteServerButton.setText("Stop...");
        stopRemoteServerButton.setEnabled(false);
        stopRemoteServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopRemoteServerButtonActionPerformed(evt);
            }
        });
        RemoteMenu.add(stopRemoteServerButton);

        settingsMenu.add(RemoteMenu);

        serialSetting.setText("Serial Settings");
        serialSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialSettingActionPerformed(evt);
            }
        });
        settingsMenu.add(serialSetting);

        settingItem.setText("Settings");
        settingItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingItemActionPerformed(evt);
            }
        });
        settingsMenu.add(settingItem);

        mainMenuBar.add(settingsMenu);

        machine.setText("Machine");

        control.setText("Control");
        control.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controlActionPerformed(evt);
            }
        });
        machine.add(control);

        macros.setText("Macros");
        macros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                macrosActionPerformed(evt);
            }
        });
        machine.add(macros);

        mainMenuBar.add(machine);

        setJMenuBar(mainMenuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(bottomTabbedPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 655, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(statusPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(fileRunPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(commandTextField)
                    .add(layout.createSequentialGroup()
                        .add(commandLabel)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(6, 6, 6)
                                .add(fileLabel)
                                .add(0, 0, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(sendButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 68, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(pauseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(cancelButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(visualizeButton)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(saveButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(4, 4, 4))
                    .add(fileTextField))
                .add(18, 50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(statusPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 137, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(commandLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(commandTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(fileRunPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(fileLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(fileTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(sendButton)
                            .add(pauseButton)
                            .add(cancelButton)
                            .add(visualizeButton)
                            .add(saveButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(51, 51, 51)
                .add(bottomTabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                .add(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /** End of generated code.
     */
    public void openSerial(){
             // Hook the view up to the model
            String firmware = ssd.getFirmware();
            this.controller = FirmwareUtils.getControllerFor(firmware);

            applySettingsToController(this.controller);
            
            // Register comm listeners
            this.controller.addListener(this);
            if (vw != null) {
                this.controller.addListener(vw);
                vw.setMinArcLength(this.controller.getSmallArcThreshold());
                vw.setArcLength(this.controller.getSmallArcSegmentLength());
            }
            if (remote != null) {
                this.controller.addListener(remote);
            }
           String port = ssd.getComPort();
           int portRate = ssd.getPortRate();
            Boolean ret = openCommConnection(port, portRate);

            if (ret) {
                this.updateControlsForState(ControlState.COMM_IDLE);
                if (this.gcodeFile != null) {
                    try {
                        loadFile(this.gcodeFile);
                    } catch (FileNotFoundException ex) {
                        MainWindow.displayErrorDialog(Localization.getString(
                                "mainWindow.error.openingFile") +": " + ex.getMessage());
                    } catch (IOException e) {
                        MainWindow.displayErrorDialog(Localization.getString(
                                "mainWindow.error.processingFile") +": " + e.getMessage());
                    }
                }
                // Let the command field grab focus.
                commandTextField.grabFocus();
            }
      
    }
    private void commandTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandTextFieldActionPerformed
        final String str = this.commandTextField.getText().replaceAll("(\\r\\n|\\n\\r|\\r|\\n)", "");
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    controller.queueStringForComm(str);
                } catch (Exception ex) {
                    displayErrorDialog(ex.getMessage());
                }
            }
        });
        this.commandTextField.setText("");
        this.manualCommandHistory.add(str);
        this.commandNum = -1;
    }//GEN-LAST:event_commandTextFieldActionPerformed
    
    @Override
	public void sendGcodeCommand(String commandText){
        this.commandTextField.setText(commandText);
        commandTextFieldActionPerformed(new ActionEvent(commandTextField, 1, "sendCommand"));
    }

    // TODO: Find out how to make these key* functions actions like the above.
    // TODO: Create custom text area that will do all this stuff without
    //       cluttering up the MainWindow class.
    @Override
    public void keyPressed(KeyEvent ke) {
        boolean pressed = false;
        
        if (ke.getKeyCode() == KeyEvent.VK_UP) {
            pressed = true;
            if (this.commandNum == 0 || this.manualCommandHistory.isEmpty()) {
                java.awt.Toolkit.getDefaultToolkit().beep();
            } else if (this.commandNum == -1) {
                this.commandNum = this.manualCommandHistory.size() -1;
            } else {
                this.commandNum--;
            }
        }
        else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {
            pressed = true;
            if ((this.commandNum == -1) || this.commandNum == (this.manualCommandHistory.size() -1)) {
                java.awt.Toolkit.getDefaultToolkit().beep();
                return;
            } else {
                this.commandNum++;
            }
        }
        
        if (pressed && this.commandNum != -1) {
            String text = this.manualCommandHistory.get(this.commandNum);
            this.commandTextField.setText(text);
        }
    }
    
    @Override
    public void keyTyped(KeyEvent ke) {
        // Don't care about this one...
    }
    
    @Override
    public void keyReleased(KeyEvent ke) {
        // Or this one...
    }
    

    private void increaseStepActionPerformed(java.awt.event.ActionEvent evt) {                                             
        double stepSize = this.getStepSize();
        if (stepSize >= 1) {
            stepSize++;
        } else if (stepSize >= 0.1) {
            stepSize = stepSize + 0.1;
        } else if (stepSize >= 0.01) {
            stepSize = stepSize + 0.01;
        } else {
            stepSize = 0.01;
        }
        this.setStepSize(stepSize);
    }                                            

    private void decreaseStepActionPerformed(java.awt.event.ActionEvent evt) {                                             
        double stepSize = this.getStepSize();
        if (stepSize > 1) {            
            stepSize--;
        } else if (stepSize > 0.1) {
            stepSize = stepSize - 0.1;
        } else if (stepSize > 0.01) {
            stepSize = stepSize - 0.01;
        }
        this.setStepSize(stepSize);
    }                                            
    
    private void divideStepActionPerformed(java.awt.event.ActionEvent evt) {                                             
        double stepSize = this.getStepSize();

        if (stepSize > 100) {            
            stepSize = 100;
        } else if (stepSize <= 100 && stepSize > 10) {
            stepSize = 10;
        } else if (stepSize <= 10 && stepSize > 1) {
            stepSize = 1;
        } else if (stepSize <= 1 && stepSize > 0.1) {
            stepSize = 0.1;
        } else if (stepSize <= 0.1 ) {
            stepSize = 0.01;
        } 
        
        this.setStepSize(stepSize);
    }                                            

    private void multiplyStepActionPerformed(java.awt.event.ActionEvent evt) {                                             
        double stepSize = this.getStepSize();

        if (stepSize < 0.01) {            
            stepSize = 0.01;
        } else if (stepSize >= 0.01 && stepSize < 0.1) {            
            stepSize = 0.1;
        }  else if (stepSize >= 0.1 && stepSize < 1) {            
            stepSize = 1;
        }  else if (stepSize >= 1 && stepSize < 10) {            
            stepSize = 10;
        }  else if (stepSize >= 10) {            
            stepSize = 100;
        }

        this.setStepSize(stepSize);
    }                                            
    
    @Override
    public  void resetCoordinatesButtonActionPerformed(){
        try {
            this.controller.resetCoordinatesToZero();
        } catch (Exception ex) {
            MainWindow.displayErrorDialog(ex.getMessage());
        }
    }

    @Override
    public  void resetXCoordinateButtonActionPerformed(){
        try {
            this.controller.resetCoordinateToZero('X');
        } catch (Exception ex) {
            MainWindow.displayErrorDialog(ex.getMessage());
        }
    }

    @Override
    public  void resetYCoordinateButtonActionPerformed(){
        try {
            this.controller.resetCoordinateToZero('Y');
        } catch (Exception ex) {
            MainWindow.displayErrorDialog(ex.getMessage());
        }
    }

    @Override
    public  void resetZCoordinateButtonActionPerformed(){
        try {
            this.controller.resetCoordinateToZero('Z');
        } catch (Exception ex) {
            MainWindow.displayErrorDialog(ex.getMessage());
        }
    }

                                                

    @Override
    public void returnToZeroButtonActionPerformed(){
        try {
            this.controller.returnToHome();
            // The return to home command uses G91 to lift the tool.
            this.G91Mode = true;
        } catch (Exception ex) {
            MainWindow.displayErrorDialog(ex.getMessage());
        }
    }
    // TODO: It would be nice to streamline this somehow...
    private void grblConnectionSettingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grblConnectionSettingsMenuItemActionPerformed
        ConnectionSettingsDialog gcsd = new ConnectionSettingsDialog(this, true);
        
        // Set initial values.
        gcsd.setSpeedOverrideEnabled(settings.isOverrideSpeedSelected());
        gcsd.setSpeedOverridePercent((int) settings.getOverrideSpeedValue());
        gcsd.setMaxCommandLength(settings.getMaxCommandLength());
        gcsd.setTruncateDecimalLength(settings.getTruncateDecimalLength());
        gcsd.setSingleStepModeEnabled(settings.isSingleStepMode());
        gcsd.setRemoveAllWhitespace(settings.isRemoveAllWhitespace());
        gcsd.setStatusUpdatesEnabled(settings.isStatusUpdatesEnabled());
        gcsd.setStatusUpdatesRate(settings.getStatusUpdateRate());
        gcsd.setStateColorDisplayEnabled(settings.isDisplayStateColor());
        gcsd.setConvertArcsToLines(settings.isConvertArcsToLines());
        gcsd.setSmallArcThreshold(settings.getSmallArcThreshold());
        gcsd.setSmallArcSegmentLengthSpinner(settings.getSmallArcSegmentLength());
        gcsd.setVisible(true);
        
        if (gcsd.saveChanges()) {
            settings.setOverrideSpeedSelected(gcsd.getSpeedOverrideEnabled());
            settings.setOverrideSpeedValue(gcsd.getSpeedOverridePercent());
            settings.setMaxCommandLength(gcsd.getMaxCommandLength());
            settings.setTruncateDecimalLength(gcsd.getTruncateDecimalLength());
            settings.setSingleStepMode(gcsd.getSingleStepModeEnabled());
            settings.setRemoveAllWhitespace(gcsd.getRemoveAllWhitespace());
            settings.setStatusUpdatesEnabled(gcsd.getStatusUpdatesEnabled());
            settings.setStatusUpdateRate(gcsd.getStatusUpdatesRate());
            settings.setDisplayStateColor(gcsd.getDisplayStateColor());
            settings.setConvertArcsToLines(gcsd.getConvertArcsToLines());
            settings.setSmallArcThreshold(gcsd.getSmallArcThreshold());
            settings.setSmallArcSegmentLength(gcsd.getSmallArcSegmentLength());
            
            if (this.controller != null) {
                applySettingsToController(this.controller);
            }

            if (this.vw != null) {
                vw.setMinArcLength(gcsd.getSmallArcThreshold());
                vw.setArcLength(gcsd.getSmallArcSegmentLength());
            }
        }
    }//GEN-LAST:event_grblConnectionSettingsMenuItemActionPerformed

    private void visualizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visualizeButtonActionPerformed
        // Create new object if it is null.
            this.vw=null;
            this.vw = new VisualizerWindow();
            if (this.fileTextField.getText().length() > 1) {
                vw.setGcodeFile(this.fileTextField.getText());
            }
           //visualizePanel.add(vw);
           vw.setVisible(true); 
    }//GEN-LAST:event_visualizeButtonActionPerformed

    @Override
    public void cancelButtonActionPerformed() {
        this.controller.cancelSend();

        this.updateControlsForState(ControlState.COMM_IDLE);
    }
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        cancelButtonActionPerformed();
    }//GEN-LAST:event_cancelButtonActionPerformed

    @Override
    public void pauseButtonActionPerformed() {
        // Note: Cannot cancel a send while paused because there are commands
        //       in the GRBL buffer which can't be un-sent.
        try {
            String pause = Localization.getString("mainWindow.ui.pauseButton");
            String resume = Localization.getString("mainWindow.ui.resumeButton");
            
            if (this.pauseButton.getText().equalsIgnoreCase(pause)) {
                this.controller.pauseStreaming();
                this.pauseButton.setText(resume);
                this.cancelButton.setEnabled(false);
            }
            else if (this.pauseButton.getText().equalsIgnoreCase(resume)) {
                this.controller.resumeStreaming();
                this.pauseButton.setText(pause);
                this.cancelButton.setEnabled(true);
            }
        } catch (Exception e) {
            e.printStackTrace();
            MainWindow.displayErrorDialog(Localization.getString("mainWindow.error.pauseResume"));
        }
    }
    
    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
    	pauseButtonActionPerformed();
    }//GEN-LAST:event_pauseButtonActionPerformed

    @Override
    public void sendButtonActionPerformed(){
        ActionListener actionListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                java.awt.EventQueue.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        int sent = controller.rowsSent();

                        // Early exit condition.
                        if (sent == 0) { return; }

                        long elapsedTime = controller.getSendDuration();
                        durationValueLabel.setText(Utils.formattedMillis(elapsedTime));
                        long estimate = jobEstimate;
                        if (estimate <= 0) {
                            long timePerRow = elapsedTime / sent;
                            estimate = timePerRow * controller.rowsInSend();
                        }
                        remainingTimeValueLabel.setText(Utils.formattedMillis(estimate - elapsedTime));
                    }
                });

            }
        };

        this.resetTimerLabels();

        if (timer != null){ timer.stop(); }
        timer = new Timer(1000, actionListener);

        // Note: there is a divide by zero error in the timer because it uses
        //       the rowsValueLabel that was just reset.

        try {
            // This will throw an exception and prevent that other stuff from
            // happening (clearing the table before its ready for clearing.
            this.controller.isReadyToStreamFile();

            this.updateControlsForState(ControlState.COMM_SENDING);

            // Mark the position in the table where the commands will begin.
            //commandTable.setOffset();

            if (G91Mode) {
                this.controller.preprocessAndAppendGcodeCommand("G90");
            }

            this.controller.appendGcodeCommands(processedCommandLines, this.gcodeFile);

            this.resetSentRowLabels(this.controller.rowsInQueue());
            timer.start();
            this.controller.beginStreaming();
        } catch (Exception e) {
            timer.stop();
            this.updateControlsForState(ControlState.COMM_IDLE);
            e.printStackTrace();
            MainWindow.displayErrorDialog(
                    Localization.getString("mainWindow.error.startingStream") + ": "+e.getMessage());
        }
    }
    
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
    	sendButtonActionPerformed();
    }//GEN-LAST:event_sendButtonActionPerformed

    private void grblFirmwareSettingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grblFirmwareSettingsMenuItemActionPerformed
        try {
            if (this.controller == null) {
                MainWindow.displayErrorDialog(Localization.getString("mainWindow.error.noFirmware"));
            } else if (this.controller instanceof GrblController) {
                    GrblFirmwareSettingsDialog gfsd = new GrblFirmwareSettingsDialog(this, true, (GrblController)this.controller);
                    gfsd.setVisible(true);
            } else {
                MainWindow.displayErrorDialog(Localization.getString("mainWindow.error.notGrbl"));
            }
        } catch (Exception ex) {
                MainWindow.displayErrorDialog(ex.getMessage());
        }
    }//GEN-LAST:event_grblFirmwareSettingsMenuItemActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        int returnVal = fileChooser.showSaveDialog(this);
                //fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                File newFile = fileChooser.getSelectedFile();
                AbstractController control = FirmwareUtils.getControllerFor(FirmwareUtils.GRBL);
                applySettingsToController(control);
                control.appendGcodeCommands(this.processedCommandLines, this.gcodeFile);
                control.saveToFile(newFile);
            } catch (FileNotFoundException ex) {
                MainWindow.displayErrorDialog(Localization.getString("mainWindow.error.openingFile")
                        + ": " + ex.getMessage());
            } catch (IOException e) {
                MainWindow.displayErrorDialog(Localization.getString("mainWindow.error.processingFile")
                        + ": "+e.getMessage());
            } catch (Exception e) {
                e.printStackTrace();
                MainWindow.displayErrorDialog(Localization.getString("mainWindow.error.duringSave") +
                        ": " + e.getMessage());
            }
        }    
    }//GEN-LAST:event_saveButtonActionPerformed

        private void startRemoteServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startRemoteServerButtonActionPerformed
	    this.remote = new Remote(this);
	    this.remote.start();
	    this.startRemoteServerButton.setEnabled(false);
	    this.stopRemoteServerButton.setEnabled(true);
            
            if (this.controller != null) {
                this.controller.addListener(remote);
            }
        }//GEN-LAST:event_startRemoteServerButtonActionPerformed

        private void stopRemoteServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopRemoteServerButtonActionPerformed
	    this.remote.stop();
	    this.startRemoteServerButton.setEnabled(true);
	    this.stopRemoteServerButton.setEnabled(false);
        }//GEN-LAST:event_stopRemoteServerButtonActionPerformed

    private void serialSettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialSettingActionPerformed
     ssd.setVisible(true);
    }//GEN-LAST:event_serialSettingActionPerformed

    private void controlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controlActionPerformed
     mcd.setVisible(true);
    }//GEN-LAST:event_controlActionPerformed

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
            int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                fileTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
                gcodeFile = fileChooser.getSelectedFile();
                loadFile(gcodeFile);         
                
            } catch (FileNotFoundException ex) {
                MainWindow.displayErrorDialog(Localization.getString(
                        "mainWindow.error.openingFile") +": " + ex.getMessage());
            } catch (IOException e) {
                MainWindow.displayErrorDialog(Localization.getString(
                        "mainWindow.error.processingFile") +": " + e.getMessage());

            }
        } else {
            // Canceled file open.
        }  

    }//GEN-LAST:event_browseActionPerformed

    private void macrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_macrosActionPerformed
       mmd.setVisible(true);
    }//GEN-LAST:event_macrosActionPerformed

    private void settingItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingItemActionPerformed
      sssd.setVisible(true);
    }//GEN-LAST:event_settingItemActionPerformed

    private void WizardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WizardActionPerformed
     wbd.setVisible(true);
    }//GEN-LAST:event_WizardActionPerformed

    public void executeCustomGcode(String str)
    {
        str = str.replaceAll("(\\r\\n|\\n\\r|\\r|\\n)", "");
        final String[] parts = str.split(";");
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    for (String cmd : parts)
                    {
                        controller.queueStringForComm(cmd);
                    }
                } catch (Exception ex) {
                    displayErrorDialog(ex.getMessage());
                }
            }
        });
        
        for (String cmd : parts)
        {
            this.manualCommandHistory.add(cmd);
            this.commandNum = -1;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the SYSTEM look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
     
                    javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
             
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
         /* Create the form */
        final MainWindow mw = new MainWindow();

        /* Load the stored settings or generate defaults */
        mw.settings = SettingsFactory.loadSettings();
        
        
        Dimension dim = java.awt.Toolkit.getDefaultToolkit().getScreenSize();

        /* Apply the settings to the MainWindow bofore showing it */
        MachineControlDialog.setMovementEnabled(mw.settings.isManualModeEnabled());
        MachineControlDialog.setStepSize(mw.settings.getManualModeStepSize());
        mw.fileChooser = new JFileChooser(mw.settings.getFileName());
        SerialSettingsDialog.setComPort(mw.settings.getPort());
        SerialSettingsDialog.setPortRate(mw.settings.getPortRate());
        SettingsSettingsDialog.scrollWindowCheckBox.setSelected(mw.settings.isScrollWindowEnabled());
        SettingsSettingsDialog.showVerboseOutputCheckBox.setSelected(mw.settings.isVerboseOutputEnabled());
        SerialSettingsDialog.setFirmware(mw.settings.getFirmwareVersion());
        MachineMacrosDialog.setCustom1(mw.settings.getCustomGcode1());
        MachineMacrosDialog.setCustom2(mw.settings.getCustomGcode2());
        MachineMacrosDialog.setCustom3(mw.settings.getCustomGcode3());
        MachineMacrosDialog.setCustom4(mw.settings.getCustomGcode4());
        MachineMacrosDialog.setCustom5(mw.settings.getCustomGcode5());
        //mw.setSize(mw.settings.getMainWindowSettings().width, mw.settings.getMainWindowSettings().height);
        //mw.setLocation(mw.settings.getMainWindowSettings().xLocation, mw.settings.getMainWindowSettings().yLocation);
//        mw.setSize(java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().width, java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().width);
        
        mw.addComponentListener(new ComponentListener() {
            @Override
            public void componentResized(ComponentEvent ce) {
          //      mw.settings.getMainWindowSettings().height = ce.getComponent().getSize().height;
           //     mw.settings.getMainWindowSettings().width = ce.getComponent().getSize().width;
            }

            @Override
            public void componentMoved(ComponentEvent ce) {
               // mw.settings.getMainWindowSettings().xLocation = ce.getComponent().getLocation().x;
               // mw.settings.getMainWindowSettings().yLocation = ce.getComponent().getLocation().y;
            }

            @Override
            public void componentShown(ComponentEvent ce) {}
            @Override
            public void componentHidden(ComponentEvent ce) {}
        });

        /* Display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                mw.setVisible(true);
            }
        });
        
        mw.initFileChooser();
        mw.openSerial();
        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                if (mw.fileChooser.getSelectedFile() != null ) {
                    mw.settings.setFileName(mw.fileChooser.getSelectedFile().getAbsolutePath());
                }
                
                mw.settings.setManualModeStepSize(mw.getStepSize());
                mw.settings.setManualModeEnabled(mw.movementEnabled());
                mw.settings.setPort(SerialSettingsDialog.getComPort());
                mw.settings.setPortRate(Integer.toString(SerialSettingsDialog.getPortRate()));
                mw.settings.setScrollWindowEnabled(SettingsSettingsDialog.scrollWindowCheckBox.isSelected());
                mw.settings.setVerboseOutputEnabled(SettingsSettingsDialog.showVerboseOutputCheckBox.isSelected());
                mw.settings.setFirmwareVersion(SerialSettingsDialog.getFirmware());
                SettingsFactory.saveSettings(mw.settings);
                
                if(mw.remote!=null){
                	mw.remote.stop();
                }
            }
        });
    }
  
    /**
     * FileChooser has to be initialized after JFrame is opened, otherwise the settings will not be applied.
     */
    private void initFileChooser() {
        //Setup the file filter for gcode files.
        GcodeFileTypeFilter filter = new GcodeFileTypeFilter();
        
        // Setup file browser with the last path used.
        this.fileChooser = new JFileChooser(settings.getFileName()); 
        this.fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        this.fileChooser.setFileHidingEnabled(true);
        this.fileChooser.addChoosableFileFilter(filter);
        this.fileChooser.setAcceptAllFileFilterUsed(true);
        this.fileChooser.setFileFilter(filter);
    }
        
    private void initProgram() {
        ssd.setVisible(false);
        mcd.setVisible(false);
        mmd.setVisible(false);
        sssd.setVisible(false);
        this.setLocalLabels();
        this.checkScrollWindow();
        this.setTitle(Localization.getString("title") + " (" 
                + Localization.getString("version") + " " + VERSION + ")");
        Image icon = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB_PRE);
        this.setIconImage(icon);
        // starting Remote
          this.remote = new Remote(this);
	    this.remote.start();
	    this.startRemoteServerButton.setEnabled(false);
	    this.stopRemoteServerButton.setEnabled(true);
            
            if (this.controller != null) {
                this.controller.addListener(remote);
            }
        // Command History
        this.manualCommandHistory = new ArrayList<String>();
        this.commandTextField.addKeyListener(this);
        
        // Add keyboard listener for manual controls.
        KeyboardFocusManager.getCurrentKeyboardFocusManager()
            .addKeyEventDispatcher(new KeyEventDispatcher() {
                @Override
                public boolean dispatchKeyEvent(KeyEvent e) {
                    // Check context.
                    if (((mcd.movementEnabled()) &&
                            e.getID() == KeyEvent.KEY_PRESSED) &&
                            mcd.xPlusEnabled()) {
                        switch (e.getKeyCode()) {
                            case KeyEvent.VK_RIGHT:
                            case KeyEvent.VK_KP_RIGHT:
                            case KeyEvent.VK_NUMPAD6:
                                mcd.doXPlus();
                                e.consume();
                                return true;
                            case KeyEvent.VK_LEFT:
                            case KeyEvent.VK_KP_LEFT:
                            case KeyEvent.VK_NUMPAD4:
                                mcd.doXMinus();
                                e.consume();
                                return true;
                            case KeyEvent.VK_UP:
                            case KeyEvent.VK_KP_UP:
                            case KeyEvent.VK_NUMPAD8:
                                mcd.doYPlus();
                                e.consume();
                                return true;
                            case KeyEvent.VK_DOWN:
                            case KeyEvent.VK_KP_DOWN:
                            case KeyEvent.VK_NUMPAD2:                                                                                                                        
                                mcd.doYMinus();
                                e.consume();
                                return true;
                            case KeyEvent.VK_PAGE_UP:
                            case KeyEvent.VK_NUMPAD9:
                                mcd.doZPlus();
                                e.consume();
                                return true;
                            case KeyEvent.VK_PAGE_DOWN:
                            case KeyEvent.VK_NUMPAD3:
                                mcd.doZMinus();
                                e.consume();
                                return true;
                            case KeyEvent.VK_ADD:
                                increaseStepActionPerformed(null);
                                e.consume();
                                return true;
                            case KeyEvent.VK_SUBTRACT:
                                decreaseStepActionPerformed(null);
                                e.consume();
                                return true;
                            case KeyEvent.VK_DIVIDE:
                                divideStepActionPerformed(null);
                                e.consume();
                                return true;
                            case KeyEvent.VK_MULTIPLY:
                                multiplyStepActionPerformed(null);
                                e.consume();
                                return true;
                            case KeyEvent.VK_INSERT:
                            case KeyEvent.VK_NUMPAD0:
                                mcd.resetCoordinates();
                                e.consume();
                                return true;
                        }
                    }
                    
                    return false;
                }
            });
        
        
    }

    private double getStepSize() {
        BigDecimal bd = new BigDecimal(mcd.getStepSize()).setScale(2, RoundingMode.HALF_EVEN);
        return bd.doubleValue();
        //return Double.parseDouble( this.stepSizeSpinner.getValue().toString() );
    }
    private boolean movementEnabled(){
        return mcd.movementEnabled();
    }
    private void setStepSize(double val) {
        BigDecimal bd = new BigDecimal(val).setScale(2, RoundingMode.HALF_EVEN);
        val = bd.doubleValue();
        mcd.setStepSize(val);
    }

    /**
     * Sends a G91 command in some combination of x, y, and z directions with a
     * step size of stepDirection.
     * 
     * Direction is specified by the direction param being positive or negative.
     */
    public void adjustManualLocation(int dirX, int dirY, int dirZ, double stepSize) {
        
        // Don't send empty commands.
        if ((dirX == 0) && (dirY == 0) && (dirZ == 0)) {
            return;
        }

        // Format step size from spinner.
        String formattedStepSize = formatter.format(stepSize);

        // Build G91 command.
        StringBuilder command = new StringBuilder("G91 G0 ");
        
        if (dirX != 0) {
            command.append(" X");
            if (dirX < 0) {
                command.append('-');
            }
            command.append(formattedStepSize);
        } if (dirY != 0) {
            command.append(" Y");
            if (dirY < 0) {
                command.append('-');
            }
            command.append(formattedStepSize);
        } if (dirZ != 0) {
            command.append(" Z");
            if (dirZ < 0) {
                command.append('-');
            }
            command.append(formattedStepSize);
        }

        try {
            this.controller.queueStringForComm(command.toString());
            G91Mode = true;
        } catch (Exception ex) {
            MainWindow.displayErrorDialog(ex.getMessage());
        }
    }
    
    /**
     * Sends a G91 command in some combination of x, y, and z directions with a
     * step size of stepDirection.
     * 
     * Direction is specified by the direction param being positive or negative.
     */
    public void adjustManualLocation(int dirX, int dirY, int dirZ) {
    	adjustManualLocation(dirX, dirY, dirZ, this.getStepSize());
    }
    
    private void setStatusColorForState(String state) {
        if (settings.isDisplayStateColor()) {
            java.awt.Color color = null; // default to a transparent background.
            if (state.equals(Localization.getString("mainWindow.status.alarm"))) {
                color = Color.RED;
            } else if (state.equals(Localization.getString("mainWindow.status.hold"))) {
                color = Color.YELLOW;
            } else if (state.equals(Localization.getString("mainWindow.status.queue"))) {
                color = Color.YELLOW;
            } else if (state.equals(Localization.getString("mainWindow.status.run"))) {
                color = Color.GREEN;
            }

            this.activeStateLabel.setBackground(color);
            this.activeStateValueLabel.setBackground(color);
        } else {
            this.activeStateLabel.setBackground(null);
            this.activeStateValueLabel.setBackground(null);
        }
    }
    
    private ControlState lastControlState = ControlState.COMM_DISCONNECTED;
    
    public void updateControlsForState(ControlState state) {
        
        switch (state) {
            case FILE_SELECTED:
                this.saveButton.setEnabled(true);
                this.visualizeButton.setEnabled(true);
                this.updateFileControls(this.controller != null && this.controller.isCommOpen());
                break;
            case COMM_DISCONNECTED:
                this.updateConnectionControls(false);
                mcd.updateManualControls(false);
                mcd.updateWorkflowControls(false);
                mmd.updateCustomGcodeControls(false);
                this.updateFileControls(false);
                this.updateControlsStopSending();
                this.setStatusColorForState("");
                break;
            case COMM_IDLE:
                this.updateConnectionControls(true);
                mcd.updateManualControls(true);
                mcd.updateWorkflowControls(true);
                mmd.updateCustomGcodeControls(true);
                this.updateControlsStopSending();
                break;
            case COMM_SENDING:
                // Command tab
                this.commandTextField.setEnabled(false);

                // File tab
                this.sendButton.setEnabled(false);
                this.pauseButton.setEnabled(true);
                this.cancelButton.setEnabled(true);
                this.pauseButton.setText(Localization.getString("mainWindow.ui.pauseButton"));

                // Workflow tab
                mcd.updateWorkflowControls(false);
                mmd.updateCustomGcodeControls(false);
                // Jogging commands
                mcd.updateManualControls(false);
        
                break;
            case COMM_SENDING_PAUSED:
                this.pauseButton.setText(Localization.getString("mainWindow.ui.resumeButton"));
                break;
            default:
                
        }
        
        lastControlState = state;
    }
    
    /**
     * Enable/disable connection frame based on connection state.
     */
    private void updateConnectionControls(boolean isOpen) {

 
        this.commandTextField.setEnabled(isOpen);

        
    }
    
    /**
     * Enable/disable file frame based on connection state.
     */
    private void updateFileControls(boolean enabled) {
        this.sendButton.setEnabled(enabled && this.gcodeFile != null);
        //browse always enabled.
        //this.browseButton.setEnabled(enabled);
        this.fileTextField.setEnabled(enabled);

        if (!enabled) {
            updateControlsStopSending();
        }
    }
    
    private void updateControlsStopSending() {
        if (this.timer != null && this.timer.isRunning()) {
            // Stop the timer
            this.timer.stop();
        }
        
        // In case transitioning from file sending or file send paused.
        this.pauseButton.setText(Localization.getString("mainWindow.ui.pauseButton"));
        this.pauseButton.setEnabled(false);
        this.cancelButton.setEnabled(false);
    }
    

    
  

    private void resetTimerLabels() {
        // Reset labels
        this.durationValueLabel.setText("00:00:00");
        if (this.jobEstimate < 0) {
            this.remainingTimeValueLabel.setText("estimating...");
        } else if (this.jobEstimate == 0) {
            this.remainingTimeValueLabel.setText("--:--:--");
        } else {
            this.remainingTimeValueLabel.setText(Utils.formattedMillis(this.jobEstimate));
        }
    }

    private void resetSentRowLabels(Integer numRows) {
        // Reset labels
        String totalRows =  numRows.toString();
        resetTimerLabels();
        this.sentRowsValueLabel.setText("0");
        this.remainingRowsValueLabel.setText(totalRows);
        this.rowsValueLabel.setText(totalRows);
    }
    
    /**
     * Updates all text labels in the GUI with localized labels.
     */
    private void setLocalLabels() {
      
        this.cancelButton.setText(Localization.getString("mainWindow.swing.cancelButton"));
        this.commandLabel.setText(Localization.getString("mainWindow.swing.commandLabel"));
        this.durationLabel.setText(Localization.getString("mainWindow.swing.durationLabel"));
        this.fileLabel.setText(Localization.getString("mainWindow.swing.fileLabel"));
        
        this.firmwareSettingsMenu.setText(Localization.getString("mainWindow.swing.firmwareSettingsMenu"));
        this.grblConnectionSettingsMenuItem.setText(Localization.getString("mainWindow.swing.grblConnectionSettingsMenuItem"));
        this.grblFirmwareSettingsMenuItem.setText(Localization.getString("mainWindow.swing.grblFirmwareSettingsMenuItem"));
        this.settingsMenu.setText(Localization.getString("mainWindow.swing.settingsMenu"));
        this.statusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
                Localization.getString("mainWindow.swing.statusPanel")));
        this.bottomTabbedPane.setTitleAt(1, Localization.getString("mainWindow.swing.bottomTabbedPane.console"));
        this.bottomTabbedPane.setTitleAt(0, Localization.getString("mainWindow.swing.bottomTabbedPane.table"));
        this.latestCommentLabel.setText(Localization.getString("mainWindow.swing.latestCommentLabel"));
        this.machinePosition.setText(Localization.getString("mainWindow.swing.machinePosition"));
  
        this.pauseButton.setText(Localization.getString("mainWindow.swing.pauseButton"));
        
        this.remainingRowsLabel.setText(Localization.getString("mainWindow.swing.remainingRowsLabel"));
        this.remainingTimeLabel.setText(Localization.getString("mainWindow.swing.remainingTimeLabel"));
        this.rowsLabel.setText(Localization.getString("mainWindow.swing.rowsLabel"));
        this.saveButton.setText(Localization.getString("save"));
        sssd.scrollWindowCheckBox.setText(Localization.getString("mainWindow.swing.scrollWindowCheckBox"));
        this.sendButton.setText(Localization.getString("mainWindow.swing.sendButton"));
        this.sentRowsLabel.setText(Localization.getString("mainWindow.swing.sentRowsLabel"));
        sssd.showVerboseOutputCheckBox.setText(Localization.getString("mainWindow.swing.showVerboseOutputCheckBox"));
        this.visualizeButton.setText(Localization.getString("mainWindow.swing.visualizeButton"));
        this.workPositionLabel.setText(Localization.getString("mainWindow.swing.workPositionLabel"));
        
    }
    

    public void loadFile(java.io.File file) throws FileNotFoundException, IOException {
        this.jobEstimate = 0L;
        this.gcodeFile = file;
        FileReader fr = new FileReader(file);
        Charset cs = Charset.forName(fr.getEncoding());
        fr.close();
        List<String> lines = Files.readAllLines(file.toPath(), cs);
        if (this.controller != null && this.controller.isCommOpen())  {
            this.processedCommandLines = this.controller.preprocess(lines);
            this.jobEstimate = -1L;
            this.resetSentRowLabels(this.processedCommandLines.size());
            Thread estimateThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    jobEstimate = controller.getJobLengthEstimate(processedCommandLines);
                    resetSentRowLabels(processedCommandLines.size());
                    updateControlsForState(ControlState.FILE_SELECTED);
                }
            });
            estimateThread.start();

        } else {
            this.resetSentRowLabels(lines.size());
            updateControlsForState(ControlState.FILE_SELECTED);
        }

        if (this.vw != null) {
            vw.setGcodeFile(file.getAbsolutePath());
       }
    }

    private void applySettingsToController(AbstractController controller) {
        // Apply settings settings to controller.
        if (settings.isOverrideSpeedSelected()) {
            double value = settings.getOverrideSpeedValue();
            controller.setSpeedOverride(value);
        } else {
            controller.setSpeedOverride(-1);
        }

        try {
            controller.setMaxCommandLength(settings.getMaxCommandLength());
            controller.setTruncateDecimalLength(settings.getTruncateDecimalLength());
            controller.setSingleStepMode(settings.isSingleStepMode());
            controller.setStatusUpdatesEnabled(settings.isStatusUpdatesEnabled());
            controller.setStatusUpdateRate(settings.getStatusUpdateRate());
            controller.setRemoveAllWhitespace(settings.isRemoveAllWhitespace());
            controller.setConvertArcsToLines(settings.isConvertArcsToLines());
            controller.setSmallArcThreshold(settings.getSmallArcThreshold());
            controller.setSmallArcSegmentLength(settings.getSmallArcSegmentLength());
        } catch (Exception ex) {

            StringBuilder message = new StringBuilder()
                    .append(Localization.getString("mainWindow.error.firmwareSetting"))
                    .append(": \n    ")
                    .append(Localization.getString("firmware.feature.maxCommandLength")).append("\n    ")
                    .append(Localization.getString("firmware.feature.truncateDecimal")).append("\n    ")
                    .append(Localization.getString("firmware.feature.singleStep")).append("\n    ")
                    .append(Localization.getString("firmware.feature.removeWhitespace")).append("\n    ")
                    .append(Localization.getString("firmware.feature.linesToArc")).append("\n    ")
                    .append(Localization.getString("firmware.feature.statusUpdates")).append("\n    ")
                    .append(Localization.getString("firmware.feature.statusUpdateRate"));
            
            MainWindow.displayErrorDialog(message
                    + "\n\n" + ex.getMessage());
        }
    }
    
    public void checkScrollWindow() {
        // Console output.
        DefaultCaret caret = (DefaultCaret)consoleTextArea.getCaret();
        if (sssd.scrollWindowCheckBox.isSelected()) {
          caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
          consoleTextArea.setCaretPosition(consoleTextArea.getDocument().getLength());
        } else {
            caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
        }
        
        // Command table.
        this.commandTable.setAutoWindowScroll(sssd.scrollWindowCheckBox.isSelected());
    }
    
    private String getNewline() {
        return "\r\n";
        
        /*
        if (lineBreakNR.isSelected())
            return "\n\r";
        else if (lineBreakRN.isSelected())
            return "\r\n";
        else if (lineBreakN.isSelected())
            return "\n";
        else
            return "wtfbbq";
        */
    }

    private boolean openCommConnection(String port, int portRate) {
        boolean connected = false;
        try {
            this.clearTable();
            this.sentRowsValueLabel.setText("0");
            this.sentRows = 0;

           // String port = commPortComboBox.getSelectedItem().toString();
           // int portRate = Integer.parseInt(baudrateSelectionComboBox.getSelectedItem().toString());
             
            connected = controller.openCommPort(port, portRate);

        } catch (PortInUseException e) {
            
            
            //Localization.getString("")
            StringBuilder message = new StringBuilder()
                    .append(Localization.getString("mainWindow.error.rxtx"))
                    .append("(")
                    .append(e.getClass().getName())
                    .append("): ")
                    .append(e.getMessage()).append("\n\n")
            
                    .append(Localization.getString("mainWindow.error.rxtxMac1"))
                    .append(String.format(Localization.getString("mainWindow.error.rxtxMac2"), "\"/var/lock\""))
                    .append("\n     sudo mkdir /var/lock")
                    .append("\n     sudo chmod 777 /var/lock");
            MainWindow.displayErrorDialog(message.toString());
        }catch (Exception e) {
            e.printStackTrace();
            MainWindow.displayErrorDialog(Localization.getString("mainWindow.error.connection")
                    + " ("+ e.getClass().getName() + "): "+e.getMessage());
        }
        return connected;
    }
    
    public void closeCommConnection() {
        this.controller.closeCommPort();
        this.controller = null;
    }
    
    void clearTable() {
        this.commandTable.clear();
    }
        
    public static void displayErrorDialog(String errorMessage) {
        JOptionPane.showMessageDialog(new JFrame(), errorMessage, 
                Localization.getString("error"), JOptionPane.ERROR_MESSAGE);
    }
    
    /** SerialCommunicatorListener implementation.
     */
    
    @Override
    public void fileStreamComplete(String filename, boolean success) {
        // Stop the timer
        this.timer.stop();
        remainingTimeValueLabel.setText(Utils.formattedMillis(0));
        remainingRowsValueLabel.setText("" + controller.rowsInQueue());

        this.updateControlsForState(ControlState.COMM_IDLE);

        if (success) {
            JOptionPane.showMessageDialog(new JFrame(),
                    Localization.getString("mainWindow.ui.jobComplete") + " " + this.durationValueLabel.getText(),
                    Localization.getString("success"), JOptionPane.INFORMATION_MESSAGE);
        } else {
            displayErrorDialog(Localization.getString("mainWindow.error.jobComplete"));
        }
    }
    
    @Override
    public void commandQueued(GcodeCommand command) {
        this.commandTable.addRow(command);
    }
     
    @Override
    public void commandSent(final GcodeCommand command) {
        if (this.controller.isStreamingFile()) {
            // Update # rows sent label
            this.sentRows++;
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                //sentRowsValueLabel.setText(""+sentRows);
                sentRowsValueLabel.setText(""+controller.rowsSent());
                
                // sent
                commandTable.updateRow(command);
            }});
    }
    
    @Override
    public void commandComment(String comment) {
        latestCommentValueLabel.setText(comment);
    }
    
    @Override
    public void commandComplete(final GcodeCommand command) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                commandTable.updateRow(command);

                if (controller.isStreamingFile()) {
                    // decrement remaining rows
                    int remaining = Integer.parseInt(remainingRowsValueLabel.getText());
                    if (remaining > 0) {
                        remaining--;
                        remainingRowsValueLabel.setText("" + remaining);
                    }
                    if (vw != null) {
                        vw.setCompletedCommandNumber(controller.rowsSent());
                    }
                }
            }});
    }

    // TODO: Change verbose into an enum to toggle regular/verbose/error.
    @Override
    public void messageForConsole(final String msg, final Boolean verbose) {
        final javax.swing.JTextArea consoleTextArea = this.consoleTextArea;
        final javax.swing.JCheckBox showVerboseOutputCheckBox = sssd.showVerboseOutputCheckBox;
        final javax.swing.JCheckBox scrollWindowCheckBox = sssd.scrollWindowCheckBox;

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                if (!verbose || sssd.showVerboseOutputCheckBox.isSelected()) {
                    String verboseS = "[" + Localization.getString("verbose") + "]";
                    consoleTextArea.append((verbose ? verboseS : "") + msg);

                    if (consoleTextArea.isVisible() &&
                            scrollWindowCheckBox.isEnabled()) {
                        consoleTextArea.setCaretPosition(consoleTextArea.getDocument().getLength());
                    }
                }
            }
        });
    }
    
    @Override
    public void statusStringListener(String state, Point3d machineCoord, Point3d workCoord) {
        this.activeStateValueLabel.setText( state );
        this.setStatusColorForState( state );
        
        if (machineCoord != null) {
            this.machinePositionXValueLabel.setText( formatter.format(machineCoord.x) + "" );
            this.machinePositionYValueLabel.setText( formatter.format(machineCoord.y) + "" );
            this.machinePositionZValueLabel.setText( formatter.format(machineCoord.z) + "" );
        }
        
        if (workCoord != null) {
            this.workPositionXValueLabel.setText( formatter.format(workCoord.x) + "" );
            this.workPositionYValueLabel.setText( formatter.format(workCoord.y) + "" );
            this.workPositionZValueLabel.setText( formatter.format(workCoord.z) + "" );
        }
    }
    
    @Override
    public void postProcessData(int numRows) {
    }

    public Settings getSettings() {
        return settings;
    }

    public AbstractController getController() {
        return controller;
    }

    @Override
    public void updateSystemState(SystemStateBean systemStateBean) {
        systemStateBean.setFileName(fileTextField.getText());
        systemStateBean.setLatestComment(latestCommentValueLabel.getText());
        systemStateBean.setActiveState(activeStateValueLabel.getText());
        systemStateBean.setControlState(lastControlState);
        systemStateBean.setDuration(durationValueLabel.getText());
        systemStateBean.setEstimatedTimeRemaining(remainingTimeValueLabel.getText());
        systemStateBean.setMachineX(machinePositionXValueLabel.getText());
        systemStateBean.setMachineY(machinePositionYValueLabel.getText());
        systemStateBean.setMachineZ(machinePositionZValueLabel.getText());
        systemStateBean.setRemainingRows(remainingRowsValueLabel.getText());
        systemStateBean.setRowsInFile(rowsValueLabel.getText());
        systemStateBean.setSentRows(sentRowsValueLabel.getText());
        systemStateBean.setWorkX(workPositionXValueLabel.getText());
        systemStateBean.setWorkY(workPositionYValueLabel.getText());
        systemStateBean.setWorkZ(workPositionZValueLabel.getText());
        systemStateBean.setSendButtonText(sendButton.getText());
        systemStateBean.setSendButtonEnabled(sendButton.isEnabled());
        systemStateBean.setPauseResumeButtonEnabled(pauseButton.isEnabled());
        systemStateBean.setPauseResumeButtonText(pauseButton.getText());
        systemStateBean.setCancelButtonText(cancelButton.getText());
        systemStateBean.setCancelButtonEnabled(cancelButton.isEnabled());
    }
    
    // My Variables
    public javax.swing.JFileChooser fileChooser;
    public java.io.File gcodeFile;
    private List<String> processedCommandLines;

    // TODO: Move command history box into a self contained object.
    // This is for the command history box.
    private int commandNum = -1;
    private List<String> manualCommandHistory;
    
    public AbstractController controller;
    
    private int sentRows = 0;
    private long jobEstimate = 0L;
    private boolean G91Mode = false;

    // Other windows
    VisualizerWindow vw = null;
    SerialSettingsDialog ssd= new SerialSettingsDialog(this,true,this);
    MachineControlDialog mcd= new MachineControlDialog(this,true,this);
    MachineMacrosDialog mmd= new MachineMacrosDialog(this,true,this);
    SettingsSettingsDialog sssd= new SettingsSettingsDialog(this,true,this);
    WizardBrowseDialog wbd=new WizardBrowseDialog(this,true,this);
    // Duration timer
    private Timer timer;

    public enum ControlState {
        COMM_DISCONNECTED,
        COMM_IDLE,
        COMM_SENDING,
        COMM_SENDING_PAUSED,
        FILE_SELECTED,
    };
        
    // Static utilities
    private static NumberFormat formatter = new DecimalFormat("#.###", Localization.dfs);

    // Generated variables.
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu RemoteMenu;
    private javax.swing.JMenuItem Wizard;
    private javax.swing.JLabel activeStateLabel;
    private javax.swing.JLabel activeStateValueLabel;
    private javax.swing.JTabbedPane bottomTabbedPane;
    private javax.swing.JMenuItem browse;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel commandLabel;
    private org.tyxl.uielements.GcodeTable commandTable;
    private javax.swing.JTextField commandTextField;
    private javax.swing.JTextArea consoleTextArea;
    private javax.swing.JMenuItem control;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JLabel durationValueLabel;
    private javax.swing.JMenu file;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JPanel fileRunPanel;
    public javax.swing.JTextField fileTextField;
    private javax.swing.JMenu firmwareSettingsMenu;
    private javax.swing.JMenuItem grblConnectionSettingsMenuItem;
    private javax.swing.JMenuItem grblFirmwareSettingsMenuItem;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel latestCommentLabel;
    private javax.swing.JLabel latestCommentValueLabel;
    private javax.swing.ButtonGroup lineBreakGroup;
    private javax.swing.JMenu machine;
    private javax.swing.JLabel machinePosition;
    private javax.swing.JLabel machinePositionXLabel;
    private javax.swing.JLabel machinePositionXValueLabel;
    private javax.swing.JLabel machinePositionYLabel;
    private javax.swing.JLabel machinePositionYValueLabel;
    private javax.swing.JLabel machinePositionZLabel;
    private javax.swing.JLabel machinePositionZValueLabel;
    private javax.swing.JMenuItem macros;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JButton pauseButton;
    private javax.swing.JLabel remainingRowsLabel;
    private javax.swing.JLabel remainingRowsValueLabel;
    private javax.swing.JLabel remainingTimeLabel;
    private javax.swing.JLabel remainingTimeValueLabel;
    private javax.swing.JLabel rowsLabel;
    public javax.swing.JLabel rowsValueLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton sendButton;
    private javax.swing.JLabel sentRowsLabel;
    private javax.swing.JLabel sentRowsValueLabel;
    private javax.swing.JMenuItem serialSetting;
    private javax.swing.JMenuItem settingItem;
    private javax.swing.JMenu settingsMenu;
    private javax.swing.JMenuItem startRemoteServerButton;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JMenuItem stopRemoteServerButton;
    private javax.swing.JButton visualizeButton;
    private javax.swing.JLabel workPositionLabel;
    private javax.swing.JLabel workPositionXLabel;
    private javax.swing.JLabel workPositionXValueLabel;
    private javax.swing.JLabel workPositionYLabel;
    private javax.swing.JLabel workPositionYValueLabel;
    private javax.swing.JLabel workPositionZLabel;
    private javax.swing.JLabel workPositionZValueLabel;
    // End of variables declaration//GEN-END:variables
}
